<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>AWS - Category - Debakar Roy</title>
        <link>http://debakarr.github.io/categories/aws/</link>
        <description>AWS - Category - Debakar Roy</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>debakar.roy@outlook.com (Debakar Roy)</managingEditor>
            <webMaster>debakar.roy@outlook.com (Debakar Roy)</webMaster><lastBuildDate>Sat, 13 May 2023 13:40:00 &#43;0530</lastBuildDate><atom:link href="http://debakarr.github.io/categories/aws/" rel="self" type="application/rss+xml" /><item>
    <title>Serverless Workflow to Process Files Uploaded to Amazon S3</title>
    <link>http://debakarr.github.io/posts/aws/s3todb/</link>
    <pubDate>Sat, 13 May 2023 13:40:00 &#43;0530</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/aws/s3todb/</guid>
    <description><![CDATA[This is going to be a walkthrough of one of the LAB I did in Udemy to build Serverless Workflow in AWS. The task of the LAB was to take any JSON file uploaded in S3 bucket and store the data from that in DynamoDB.
Source code for diagramfrom diagrams import Cluster, Diagram from diagrams.aws.compute import Lambda from diagrams.aws.database import Dynamodb from diagrams.aws.integration import SQS from diagrams.aws.storage import S3 with Diagram(&#34;Serverless Workflow&#34;, graph_attr={&#34;margin&#34;: &#34;-1&#34;}, show=False): with Cluster(&#34;Amazon S3&#34;): s3_bucket = S3(&#34;JSONFilesBucket&#34;) with Cluster(&#34;AWS SQS&#34;): dlq = SQS(&#34;DeadLetterQueue&#34;) json_processing_queue = SQS(&#34;JSONProcessingQueue&#34;) json_processing_queue - dlq with Cluster(&#34;AWS Lambda&#34;): lambda_function = Lambda(&#34;ProcessJSONFiles&#34;) with Cluster(&#34;Amazon DynamoDB&#34;): dynamodb_table = Dynamodb(&#34;JSONItemTable&#34;) s3_bucket &gt;&gt; json_processing_queue &gt;&gt; lambda_function &gt;&gt; dynamodb_table Thing it covers:]]></description>
</item>
</channel>
</rss>
