<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Generate Parentheses - Tag - Debakar Roy</title>
        <link>http://debakarr.github.io/tags/generate-parentheses/</link>
        <description>Generate Parentheses - Tag - Debakar Roy</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>debakar.roy@outlook.com (Debakar Roy)</managingEditor>
            <webMaster>debakar.roy@outlook.com (Debakar Roy)</webMaster><lastBuildDate>Tue, 23 Jul 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://debakarr.github.io/tags/generate-parentheses/" rel="self" type="application/rss+xml" /><item>
    <title>[LeetCode] 22. Generate Parentheses</title>
    <link>http://debakarr.github.io/posts/leetcode/generate-parentheses/</link>
    <pubDate>Tue, 23 Jul 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/leetcode/generate-parentheses/</guid>
    <description><![CDATA[Generate Parentheses Link to original Problem on LeetCode
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example, given n = 3, a solution set is:
[ &ldquo;((()))&rdquo;, &ldquo;(()())&rdquo;, &ldquo;(())()&rdquo;, &ldquo;()(())&rdquo;, &ldquo;()()()&rdquo; ]
Company: Microsoft, Facebook
Solution (Backtracking and Recursion):
Time Complexity: Space Complexity:
class Solution(object): def generateParenthesis(self, n): &#34;&#34;&#34; :type n: int :rtype: List[str] &#34;&#34;&#34; result = [] self.generateParenthesisHelper(n, n, &#34;&#34;, result) return result def generateParenthesisHelper(self, left, right, path, result): if left &gt; right: return if left == 0 and right == 0: result.]]></description>
</item>
</channel>
</rss>
