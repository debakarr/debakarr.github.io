<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Array - Tag - Debakar Roy</title>
        <link>http://debakarr.github.io/tags/array/</link>
        <description>Array - Tag - Debakar Roy</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Jul 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://debakarr.github.io/tags/array/" rel="self" type="application/rss+xml" /><item>
    <title>[LeetCode] 283. Move Zeroes</title>
    <link>http://debakarr.github.io/posts/move-zeroes/</link>
    <pubDate>Thu, 25 Jul 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/move-zeroes/</guid>
    <description><![CDATA[Move Zeroes Link to original Problem on LeetCode
Given an array nums, write a function to move all 0&rsquo;s to the end of it while maintaining the relative order of the non-zero elements.
Example:
Input: [0,1,0,3,12] Output: [1,3,12,0,0]
Note:
You must do this in-place without making a copy of the array. Minimize the total number of operations.
Company: Amazon, Bloomberg, Paytm, Samsung
Solution:
Time Complexity: O(n) Space Complexity: O(1)
class Solution(object): def moveZeroes(self, nums): &#34;&#34;&#34; :type nums: List[int] :rtype: None Do not return anything, modify nums in-place instead.]]></description>
</item>
<item>
    <title>[LeetCode] 238. Product of Array Except Self</title>
    <link>http://debakarr.github.io/posts/product-of-array-except-self/</link>
    <pubDate>Wed, 24 Jul 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/product-of-array-except-self/</guid>
    <description><![CDATA[Product of Array Except Self Link to original Problem on LeetCode
Given an array nums of n integers where n &gt; 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].
Example:
Input: [1,2,3,4] Output: [24,12,8,6]
Note: Please solve it without division and in O(n).
Follow up: Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.]]></description>
</item>
<item>
    <title>[LeetCode] 46. Permutations</title>
    <link>http://debakarr.github.io/posts/permutations/</link>
    <pubDate>Tue, 23 Jul 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/permutations/</guid>
    <description><![CDATA[Permutations Link to original Problem on LeetCode
Given a collection of distinct integers, return all possible permutations.
Example:
Input: [1,2,3] Output: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]
Company: Microsoft, Adobe, Google
Solution (Backtracking and Recursion):
Time Complexity: Space Complexity:
class Solution(object): def permute(self, nums): &#34;&#34;&#34; :type nums: List[int] :rtype: List[List[int]] &#34;&#34;&#34; result = [] self.permuteHelper(nums, [], result) return result def permuteHelper(self, nums, path, result): if not nums: result.append(path) for i in range(len(nums)): self.]]></description>
</item>
<item>
    <title>[LeetCode] 15. 3Sum</title>
    <link>http://debakarr.github.io/posts/3sum/</link>
    <pubDate>Mon, 17 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/3sum/</guid>
    <description><![CDATA[3Sum Link to original Problem on LeetCode
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note:
The solution set must not contain duplicate triplets.
Example:
Given array nums = [-1, 0, 1, 2, -1, -4],
A solution set is: [ [-1, 0, 1], [-1, -1, 2] ]]]></description>
</item>
<item>
    <title>[LeetCode] 268. Missing Number</title>
    <link>http://debakarr.github.io/posts/missing-number/</link>
    <pubDate>Mon, 17 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/missing-number/</guid>
    <description><![CDATA[Missing Number Link to original Problem on LeetCode
Given an array containing n distinct numbers taken from 0, 1, 2, &hellip;, n, find the one that is missing from the array.
Example 1:
Input: [3,0,1] Output: 2
Example 2:
Input: [9,6,4,2,3,5,7,0,1] Output: 8
Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?
Company: Amazon, Google
Solution 1 (Using XOR):
class Solution(object): def missingNumber(self, nums): &#34;&#34;&#34; :type nums: List[int] :rtype: int &#34;&#34;&#34; # We know XOR of same number is 0 # We also know that len(nums) is present in the list # iff it is not the number which is absent # So we keep len(nums) in result result = len(nums) # Then we loop through each number # and XOR the result with index and number for i, num in enumerate(nums): result ^= i result ^= num # By the end the absent number will be present in result return result Solution 2 (Using Sum):]]></description>
</item>
<item>
    <title>[LeetCode] 53. Maximum Subarray</title>
    <link>http://debakarr.github.io/posts/maximum-subarray/</link>
    <pubDate>Mon, 17 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/maximum-subarray/</guid>
    <description><![CDATA[Maximum Subarray Link to original Problem on LeetCode
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Example:
Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Follow up:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
Company: Facebook, Paypal, Yahoo, Microsoft, LinkedIn, Amazon, Goldman Sachs]]></description>
</item>
<item>
    <title>[LeetCode] 88. Merge Sorted Array</title>
    <link>http://debakarr.github.io/posts/merge-sorted-array/</link>
    <pubDate>Mon, 17 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/merge-sorted-array/</guid>
    <description><![CDATA[Merge Sorted Array Link to original Problem on LeetCode
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
Note:
The number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. Example:
Input: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3]]></description>
</item>
<item>
    <title>[LeetCode] 905. Sort Array By Parity</title>
    <link>http://debakarr.github.io/posts/sort-array-by-parity/</link>
    <pubDate>Mon, 17 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/sort-array-by-parity/</guid>
    <description><![CDATA[Sort Array By Parity Link to original Problem on LeetCode
Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.
You may return any answer array that satisfies this condition.
Example 1:
Input: [3,1,2,4] Output: [2,4,3,1] The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
Note:
1 &lt;= A.length &lt;= 5000 0 &lt;= A[i] &lt;= 5000]]></description>
</item>
</channel>
</rss>
