<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Preorder Traversal - Tag - Debakar Roy</title>
        <link>http://debakarr.github.io/tags/preorder-traversal/</link>
        <description>Preorder Traversal - Tag - Debakar Roy</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 May 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://debakarr.github.io/tags/preorder-traversal/" rel="self" type="application/rss+xml" /><item>
    <title>[LeetCode] 144. Binary Tree Preorder Traversal</title>
    <link>http://debakarr.github.io/posts/leetcode/binary-tree-preorder-traversal/</link>
    <pubDate>Wed, 15 May 2019 00:00:00 &#43;0000</pubDate>
    <author>Debakar Roy</author>
    <guid>http://debakarr.github.io/posts/leetcode/binary-tree-preorder-traversal/</guid>
    <description><![CDATA[Binary Tree Preorder Traversal Link to original Problem on LeetCode
Given a binary tree, return the preorder traversal of its nodes&rsquo; values.
Example:
Output: [1, 3, 2]
Follow up: Recursive solution is trivial, could you do it iteratively?
Company: Microsoft, Amazon
Recursive Solution:
# Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def preorderTraversal(self, root): &#34;&#34;&#34; :type root: TreeNode :rtype: List[int] &#34;&#34;&#34; # Runtime: 16 ms # Memory Usage: 11.]]></description>
</item>
</channel>
</rss>
